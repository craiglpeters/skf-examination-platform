---
import Progress from "../../../components/lab-sandbox/Progress.svelte";
import Quizzes from "../../../components/lab-sandbox/Quizzes.svelte";
import Nav from "../../../components/NavWrapper.astro";
import { getAllLabs } from "../../../db/labs/getAllLabs";
import BaseLayout from "../../../layouts/BaseLayout.astro";
import { checkSession } from "../../../utils/checkSession";
import { marked } from "marked";

import Editor from "../../../components/editor/editor.svelte";

const labs = await getAllLabs();
const { id } = Astro.params;
const lab = labs.find((lab) => lab.id.toString() === id);

const isLoggedin = await checkSession(Astro);

if (!lab) {
  return new Response(null, {
    status: 404,
  });
}

const { name } = lab;

const quizzes = [
  {
    title: "Quiz 1",
    description: "Quiz 1 description",
  },
  {
    title: "Quiz 2",
    description: "Quiz 2 description",
  },
  {
    title: "Quiz 3",
    description: "Quiz 3 description",
  },
];

let { md } = lab;

if (!md) {
  md =
    "https://raw.githubusercontent.com/blabla1337/skf-labs/master/md/Python/kbid-173-LFI-1.md";
}

let content = `Local File Inclusion (also known as LFI) is the process of including
          files, that are already locally present on the server, through the
          exploiting of vulnerable inclusion procedures implemented in the
          application. This vulnerability occurs, for example, when a page
          receives, as input, the path to the file that has to be included and
          this input is not properly sanitized, allowing directory traversal
          characters (such as dot-dot-slash) to be injected. Although most
          examples point to vulnerable PHP scripts, we should keep in mind that
          it is also common in other technologies such as JSP, ASP and others.`;

function formatText(text: string) {
  text = text.replace(/{%.*?%}/g, "");

  // replace ![](../../.gitbook/assets/sensitive-info.png) with ![](https://raw.githubusercontent.com/blabla1337/skf-labs/master/.gitbook/assets/sensitive-info.png)
  text = text.replace(/\(.*?\.gitbook\/assets\/(.*?)\)/g, (match, p1) => {
    return `(https://raw.githubusercontent.com/blabla1337/skf-labs/master/.gitbook/assets/${p1})`;
  });

  // replace png>) or jpg>) with png) or jpg)
  text = text.replace(/(png|jpg)>\)/g, (match, p1) => {
    return `${p1})`;
  });

  // encode url from markdown images ![](url)
  text = text.replace(/!\[(.*?)\]\((.*?)\)/g, (match, p1, p2) => {
    return `![${p1}](${encodeURI(p2)})`;
  });

  return text;
}

function replaceTitle(text: string) {
  // regex replace text between h1 tag
  return text.replace(/<h1.*>(.*?)<\/h1>/g, `<h1>${name}</h1>`);
}

if (md) {
  const response = await fetch(md);
  let text = await response.text();
  text = formatText(text);
  content = marked.parse(text);
  content = replaceTitle(content);
}

const showEditor = false;
const columns = showEditor ? "1fr 1fr 1fr" : "1fr 1fr";
---

<BaseLayout
  title={`SKF | LAB - ${name}`}
  loadNav={false}
  isLoggedin={isLoggedin}
>
  <div class="content">
    <Nav isLoggedin={isLoggedin} />
    <main>
      <div class="write-up">
        <article set:html={content} />
        <Quizzes quizzes={quizzes} client:load />
      </div>
      {showEditor && <Editor client:load />}
      <iframe
        src={`/lab-sandbox-sample/?lab=${name}`}
        width="100%"
        height="100%"
        allowfullscreen=""
        aria-hidden="false"
        tabindex="0"></iframe>
    </main>
    <footer>
      <Progress client:load />
      <a href={`/labs/${id && +id + 1}/lab/`} class="next-lab">Next Lab</a>
    </footer>
  </div>
</BaseLayout>

<style define:vars={{ columns }}>
  .content main {
    grid-template-columns: var(--columns);
  }
</style>

<style>
  :global(html, body) {
    height: 100%;
  }

  .content :global(nav.wrapper) {
    margin-bottom: 0;
  }

  h1 {
    margin-bottom: 2rem;
  }

  .content {
    display: grid;
    grid-template-rows: auto 1fr auto;
    height: 100%;
  }

  .content > * {
    border-top: 1px solid #ccc;
  }

  .write-up {
    padding: 2rem 2rem;
  }

  .write-up > p {
    margin-bottom: 2rem;
  }

  main {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    height: 100%;
    overflow-y: hidden;
    /* gap: 2rem; */
  }

  main > * {
    overflow-y: auto;
  }

  footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 2rem;
  }

  iframe {
    border: none;
  }

  article {
    margin-bottom: 4rem;
  }

  article :global(*) {
    font-size: 1rem;
  }

  article :global(h1) {
    font-size: 2.25rem;
    margin-bottom: 1rem;
  }

  article :global(h2) {
    font-size: 1.5rem;
    margin-bottom: 1rem;
  }

  article :global(p) {
    margin-bottom: 1rem;
  }

  article :global(a) {
    color: var(--primary-200);
    text-decoration: none;
  }

  article :global(a:hover) {
    text-decoration: underline;
  }

  article :global(pre) {
    margin-bottom: 1rem;
    overflow: auto;
  }
</style>
